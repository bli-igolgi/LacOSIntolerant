From discussion on paging and program loader

Program always goes between 128-132MB in virtual memory
Physical memory starts at 8MB + (process number * 4MB)
    Process number starts from 0
Flush TLB after swapping page
Must be able to support 2 processes for checkpoint 3 (8-12 and 12-16MB)

Program loader
    Checks ELF magic constant
    Copy file contents to the correct location (don't use memcpy, because file might be larger than 8kB, and then will go to next PCB)
    Find the first instruction's address

PCB
    Each process has its own PCB
        Call system.exe in kernel.c to test system call
    Each PCB starts at the top of a 8kB block inside the kernel 
        First PCB starts at 8MB - 1(8kB) and goes towards bigger memory addresses
            First kernel stack starts at 8MB - 4B and goes towards smaller memory addresses
        Second PCB starts at 8MB - 2(8kB)

        PID PCB starts at 8MB - (PID+1)*8kB
            PID PCB kernel stack starts at 8MB - PID*8kB - 4B    (set kernel's esp to this value, PID starts from 0)
            4B is because we don't want esp to go outside page
        etc.
    Switch the kernel stack when switching PCB
    Every kernel stack is 8kB
    Kernel goes up in memory, PCB goes down
    What you need in a PCB:
        file descriptor array
        whatever you think is necessary for running/stopping a program and should be process specific

To execute file - look at picture on piazza as a reference
    First check arguments (everything before first space is argument, everything after is arguments, must trim spaces)
    Save arguments
    Check file validity (whether it is there, if it is executable)
    Set up paging - Use 4MB page to map to 128-132MB
    Flush the TLB right away
    Load the file to memory
    Start setting up PCB
    Prepare the context switch (change certain registers)
    Push IRET context onto stack (should be 5 different 32 bit values, may need to extend them)
        1. Return address (the first instruction address)
        2. Other values to help do context switch
    Call IRET (will take values, do magic, and go somewhere else)
        Should go to first process we are trying to run (shell)
        We should be able to type something to the shell now
            Everything is the same for the typed command to set up, except paging
            Make sure to not save page for process run from shell in the same place, otherwise won't be able to return to shell

    Halt
        Restore values set up in PCB, depends on how PCB was set up initially (be careful)
        Jump back to execute, stopped right after the IRET instruction when setting up the first PCB

    esp0 is the stack pointer for kernel (privilege level 0)
